// filepath: c:\Users\Snell\advanced-react\src\store\cartSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

        // Define the structure of a single cart item
interface CartItem {
  id: number; // Unique identifier for the item
  title: string; // Name of the item
  price: number; // Price of the item
  image: string; // URL of the item's image
  quantity: number; // Quantity of the item in the cart
}

        // Define the structure of the cart state
interface CartState {
  items: CartItem[]; // Array of cart items
}

        // Initialize the cart state with items from sessionStorage or an empty array
const initialState: CartState = {
  items: JSON.parse(sessionStorage.getItem('cart') || '[]'),
};

        // Create a Redux slice for the cart
const cartSlice = createSlice({
  name: 'cart', // Name of the slice
  initialState, // Initial state of the cart
  reducers: {
        // Reducer to add an item to the cart
    addToCart: (state, action: PayloadAction<CartItem>) => {
      const existingItem = state.items.find((item) => item.id === action.payload.id);
      if (existingItem) {
        // If the item already exists, increase its quantity
        existingItem.quantity += 1;
      } else {
        // If the item doesn't exist, add it to the cart with a quantity of 1
        state.items.push({ ...action.payload, quantity: 1 });
      }
        // Save the updated cart to sessionStorage
      sessionStorage.setItem('cart', JSON.stringify(state.items));
    },
        // Reducer to remove an item from the cart by its ID
    removeFromCart: (state, action: PayloadAction<number>) => {
        // Filter out the item with the given ID
      state.items = state.items.filter((item) => item.id !== action.payload);
        // Save the updated cart to sessionStorage
      sessionStorage.setItem('cart', JSON.stringify(state.items));
    },
        // Reducer to clear all items from the cart
    clearCart: (state) => {
        // Empty the cart
      state.items = [];
        // Remove the cart data from sessionStorage
      sessionStorage.removeItem('cart');
    },
        // Reducer to update the quantity of a specific item in the cart
    updateCartQuantity: (state, action: PayloadAction<{ id: number; quantity: number }>) => {
      const { id, quantity } = action.payload;
      const existingItem = state.items.find((item) => item.id === id);
      if (existingItem) {
        // Update the item's quantity
        existingItem.quantity = quantity;
        // If the quantity is less than or equal to 0, remove the item from the cart
        if (existingItem.quantity <= 0) {
          state.items = state.items.filter((item) => item.id !== id);
        }
      }
        // Save the updated cart to sessionStorage
      sessionStorage.setItem('cart', JSON.stringify(state.items));
    },
  },
});

// Export the actions generated by createSlice
export const { addToCart, removeFromCart, clearCart, updateCartQuantity } = cartSlice.actions;

// Export the reducer to be used in the Redux store
export default cartSlice.reducer;